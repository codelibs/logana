#!/bin/bash


cd `dirname $0`
cd ..
base_dir=`pwd`

. $base_dir/conf/setting.sh

program_name=$(basename $0)
logana_version="1.0"
server_file=$base_dir/.logana_server
server_url=$SERVER_URL
log_index=$LOG_INDEX

usage() {
    echo "Usage: $program_name [COMMAND] "
    echo
    echo "Options:"
    echo "  server"
    echo "  help"
    echo
    exit 1
}

start_server() {
    for OPT in "$@" ; do
        case $OPT in
            -k | --kibana)
                with_kibana="-f $base_dir/server/docker-compose.kibana.yml"
                shift 1
                ;;
            -c | --cluster)
                with_cluster="-f $base_dir/server/docker-compose.cluster.yml"
                shift 1
                ;;
            -j | --jupyter)
                with_jupyter="-f $base_dir/server/docker-compose.jupyter.yml"
                shift 1
                ;;
            *)
                shift 1
                ;;
        esac
    done

    if [[ -f $server_file ]] ; then
        echo "$server_file exists."
        exit 1
    fi
    mkdir -p $base_dir/server/elasticsearch/plugins
    docker-compose -f $base_dir/server/docker-compose.yml $with_cluster $with_kibana $with_jupyter up -d
    echo "$with_cluster $with_kibana $with_jupyter" > $server_file

    counter=1
    ret=1
    while [ $ret != 200 -a $counter -le 60 ] ; do
        echo -n "."
        ret=`curl -w '%{http_code}\n' -s -o /dev/null $server_url`
        counter=`expr $counter + 1`
        sleep 1
    done
    echo

    setup_index_template
}

stop_server() {
    if [[ -f $server_file ]] ; then
        logana_options=`cat $server_file`
    fi
    docker-compose -f $base_dir/server/docker-compose.yml $logana_options down
    rm -f $server_file
}

clean_server() {
    if [[ -f $server_file ]] ; then
        echo "$server_file exists."
        exit 1
    fi
    for v in `docker-compose -f $base_dir/server/docker-compose.yml $logana_options config --volumes` ; do
        docker volume rm server_$v
    done
}

setup_index_template() {
    ret=`curl -s -H "Content-Type: application/json" $server_url/_index_template/$log_index | jq '.index_templates'`
    if [[ "$ret" = 'null' ]] ; then
        ret=`curl -s -XPUT -H "Content-Type: application/json" $server_url/_index_template/$log_index -d @$base_dir/conf/log_template.json | jq '.acknowledged'`
        if [[ "$ret" = 'true' ]] ; then
            echo "Registered a log index template."
        fi
    fi
}

server_command() {
    sub_cmd=$1

    case ${sub_cmd} in
        start)
            shift
            start_server $@
            ;;
        stop)
            shift
            stop_server $@
            ;;
        clean)
            shift
            clean_server $@
            ;;
        *)
            echo "Unknown sub-command for server command."
            exit 1
            ;;
    esac
}

print_cat() {
    curl -s -H "Content-Type: application/json" $server_url/_cat/$1
}

show_command() {
    sub_cmd=$1

    case ${sub_cmd} in
        allocation)
            print_cat allocation
            ;;
        shards)
            print_cat shards
            ;;
        master)
            print_cat master
            ;;
        nodes)
            print_cat nodes
            ;;
        tasks)
            print_cat tasks
            ;;
        indices)
            print_cat indices
            ;;
        segments)
            print_cat segments
            ;;
        count)
            print_cat count
            ;;
        recovery)
            print_cat recovery
            ;;
        health)
            print_cat health
            ;;
        pending_tasks)
            print_cat pending_tasks
            ;;
        aliases)
            print_cat aliases
            ;;
        thread_pool)
            print_cat thread_pool
            ;;
        plugins)
            print_cat plugins
            ;;
        fielddata)
            print_cat fielddata
            ;;
        nodeattrs)
            print_cat nodeattrs
            ;;
        repositories)
            print_cat repositories
            ;;
        templates)
            print_cat templates
            ;;
        *)
            print_cat indices
            ;;
    esac
}

cmd=$1

case ${cmd} in
    server)
        shift
        server_command $@
        ;;
    show)
        shift
        show_command $@
        ;;
    *)
        usage
        ;;
esac
